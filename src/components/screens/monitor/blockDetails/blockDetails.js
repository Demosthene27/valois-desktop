import { Link } from 'react-router-dom';
import React from 'react';
import grid from 'flexboxgrid/dist/flexboxgrid.css';
import { DateTimeFromTimestamp } from '../../../toolbox/timestamp';
import { tokenMap } from '../../../../constants/tokens';
import Box from '../../../toolbox/box';
import CopyToClipboard from '../../../toolbox/copyToClipboard';
import Feedback from '../../../toolbox/feedback/feedback';
import LabeledValue from './labeledValue';
import LiskAmount from '../../../shared/liskAmount';
import PageLayout from '../../../toolbox/pageLayout';
import TransactionsTable from '../../../shared/transactionsTable';
import routes from '../../../../constants/routes';
import styles from './blockDetails.css';

const BlockDetails = ({
  t, blockDetails, blockTransactions, isMediumViewPort,
}) => {
  const columns = [
    { header: t('Sender'), className: `${grid['col-xs-3']}`, key: 'senderId' },
    { header: t('Recipient'), className: `${grid['col-xs-3']}`, key: 'recipientId' },
    {
      header: t('Date'), className: `${grid['col-xs-2']}`, key: 'timestamp', isSortingColumn: true, defaultSort: true,
    },
    {
      header: t('Amount'), className: `${grid['col-xs-2']}`, key: 'amount', isSortingColumn: true,
    },
    { header: t('Fee'), className: `${grid['col-xs-1']}  hidden-m`, key: 'fee' },
    { header: t('Status'), className: `${grid['col-xs-1']}`, key: 'confirmations' },
  ];

  return (
    <PageLayout>
      <Box isLoading={blockDetails.isLoading} width="full">
        <Box.Header>
          <h1>{t('Block details')}</h1>
        </Box.Header>
        {
        blockDetails.error
          ? (
            <Box.Content>
              <Feedback status="error" show>{t('Failed to load block details.')}</Feedback>
            </Box.Content>
          )
          : (
            <React.Fragment>
              {
                isMediumViewPort
                  ? (
                    <div className={styles.container}>
                      <LabeledValue label={t('Block ID')}>
                        <CopyToClipboard value={blockDetails.data.id} />
                      </LabeledValue>

                      <LabeledValue label={t('Height')}>
                        <CopyToClipboard value={blockDetails.data.height} />
                      </LabeledValue>

                      <LabeledValue label={t('Confirmations')}>
                        {blockDetails.data.confirmations}
                      </LabeledValue>

                      <LabeledValue label={t('Reward')}>
                        <LiskAmount val={blockDetails.data.reward} token={tokenMap.LSK.key} />
                      </LabeledValue>

                      <LabeledValue label={t('Total fee')}>
                        <LiskAmount val={blockDetails.data.totalFee} token={tokenMap.LSK.key} />
                      </LabeledValue>

                      <LabeledValue label={t('Total forged')}>
                        <LiskAmount val={blockDetails.data.totalForged} token={tokenMap.LSK.key} />
                      </LabeledValue>

                      <LabeledValue label={t('Total amount')}>
                        <LiskAmount val={blockDetails.data.totalAmount} token={tokenMap.LSK.key} />
                      </LabeledValue>

                      <LabeledValue label={t('Date')}>
                        <DateTimeFromTimestamp time={blockDetails.data.timestamp * 1000} token="BTC" />
                      </LabeledValue>

                      <LabeledValue label={t('Generated by')}>
                        <Link to={`${routes.accounts.path}/${blockDetails.data.generatorAddress}`}>
                          {blockDetails.data.generatorUsername}
                        </Link>
                      </LabeledValue>
                    </div>
                  )
                  : (
                    <div>
                      <Box.Row>
                        <LabeledValue label={t('Block ID')}>
                          <CopyToClipboard value={blockDetails.data.id} />
                        </LabeledValue>

                        <LabeledValue label={t('Height')}>
                          <CopyToClipboard value={blockDetails.data.height} />
                        </LabeledValue>

                        <LabeledValue label={t('Version')}>
                          {blockDetails.data.version}
                        </LabeledValue>

                        <LabeledValue label={t('Confirmations')}>
                          {blockDetails.data.confirmations}
                        </LabeledValue>

                        <LabeledValue label={t('Reward')}>
                          <LiskAmount val={blockDetails.data.reward} token={tokenMap.LSK.key} />
                        </LabeledValue>

                      </Box.Row>

                      <Box.Row>
                        <LabeledValue label={t('Total fee')}>
                          <LiskAmount val={blockDetails.data.totalFee} token={tokenMap.LSK.key} />
                        </LabeledValue>

                        <LabeledValue label={t('Total forged')}>
                          <LiskAmount
                            val={blockDetails.data.totalForged}
                            token={tokenMap.LSK.key}
                          />
                        </LabeledValue>

                        <LabeledValue label={t('Total amount')}>
                          <LiskAmount
                            val={blockDetails.data.totalAmount}
                            token={tokenMap.LSK.key}
                          />
                        </LabeledValue>

                        <LabeledValue label={t('Date')}>
                          <DateTimeFromTimestamp time={blockDetails.data.timestamp * 1000} token="BTC" />
                        </LabeledValue>

                        <LabeledValue label={t('Generated by')}>
                          <Link to={`${routes.accounts.path}/${blockDetails.data.generatorAddress}`}>
                            {blockDetails.data.generatorUsername}
                          </Link>
                        </LabeledValue>
                      </Box.Row>
                    </div>
                  )
                }
            </React.Fragment>
          )
      }
      </Box>

      <TransactionsTable
        columns={columns}
        title={t('Transactions')}
        transactions={blockTransactions}
        emptyStateMessage={t('There are no transactions for this block.')}
      />
    </PageLayout>
  );
};

export default BlockDetails;
