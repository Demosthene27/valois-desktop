import { Link } from 'react-router-dom';
import React from 'react';
import grid from 'flexboxgrid/dist/flexboxgrid.css';
import { DateTimeFromTimestamp } from '../../../toolbox/timestamp';
import { tokenMap } from '../../../../constants/tokens';
import Box from '../../../toolbox/box';
import CopyToClipboard from '../../../toolbox/copyToClipboard';
import Feedback from '../../../toolbox/feedback/feedback';
import LiskAmount from '../../../shared/liskAmount';
import PageLayout from '../../../toolbox/pageLayout';
import routes from '../../../../constants/routes';
import TransactionsTable from '../../../shared/transactionsTable';
import styles from './blockDetails.css';

const BlockDetails = ({
  t, blockDetails, blockTransactions, isMediumViewPort,
}) => {
  const columns = [
    { header: t('Sender'), className: `${grid['col-xs-3']}`, key: 'senderId' },
    { header: t('Recipient'), className: `${grid['col-xs-3']}`, key: 'recipientId' },
    {
      header: t('Date'), className: `${grid['col-xs-2']}`, key: 'timestamp', isSortingColumn: true, defaultSort: true,
    },
    {
      header: t('Amount'), className: `${grid['col-xs-2']}`, key: 'amount', isSortingColumn: true,
    },
    { header: t('Fee'), className: `${grid['col-xs-1']}  hidden-m`, key: 'fee' },
    { header: t('Status'), className: `${grid['col-xs-1']}`, key: 'confirmations' },
  ];

  return (
    <PageLayout>
      <Box isLoading={blockDetails.isLoading} width="full">
        <Box.Header>
          <h1>{t('Block details')}</h1>
        </Box.Header>
        {
          blockDetails.error
            ? (
              <Box.Content>
                <Feedback status="error" show>{t('Failed to load block details.')}</Feedback>
              </Box.Content>
            )
            : (
              <React.Fragment>
                {
                  isMediumViewPort
                    ? (
                      <div className={styles.container}>
                        <div className={styles.dataContainer}>
                          <label>{t('Block ID')}</label>
                          <span>
                            <CopyToClipboard value={blockDetails.data.id} />
                          </span>
                        </div>

                        <div className={styles.dataContainer}>
                          <label>{t('Height')}</label>
                          <span>
                            <CopyToClipboard value={blockDetails.data.height} />
                          </span>
                        </div>

                        <div className={styles.dataContainer}>
                          <label>{t('Confirmations')}</label>
                          <span>{blockDetails.data.confirmations}</span>
                        </div>

                        <div className={styles.dataContainer}>
                          <label>{t('Reward')}</label>
                          <span>
                            <LiskAmount val={blockDetails.data.reward} token={tokenMap.LSK.key} />
                          </span>
                        </div>

                        <div className={styles.dataContainer}>
                          <label>{t('Total fee')}</label>
                          <span>
                            <LiskAmount val={blockDetails.data.totalFee} token={tokenMap.LSK.key} />
                          </span>
                        </div>

                        <div className={styles.dataContainer}>
                          <label>{t('Total forged')}</label>
                          <span>
                            <LiskAmount
                              val={blockDetails.data.totalForged}
                              token={tokenMap.LSK.key}
                            />
                          </span>
                        </div>

                        <div className={styles.dataContainer}>
                          <label>{t('Total amount')}</label>
                          <span>
                            <LiskAmount
                              val={blockDetails.data.totalAmount}
                              token={tokenMap.LSK.key}
                            />
                          </span>
                        </div>

                        <div className={styles.dataContainer}>
                          <label>{t('Date')}</label>
                          <span>
                            <DateTimeFromTimestamp time={blockDetails.data.timestamp * 1000} token="BTC" />
                          </span>
                        </div>

                        <div className={styles.dataContainer}>
                          <label>{t('Generated by')}</label>
                          <span>
                            <Link to={`${routes.accounts.path}/${blockDetails.data.generatorAddress}`}>
                              {blockDetails.data.generatorUsername}
                            </Link>
                          </span>
                        </div>
                      </div>
                    )
                    : (
                      <div>
                        <Box.Row>
                          <div className={styles.dataContainer}>
                            <label>{t('Block ID')}</label>
                            <span>
                              <CopyToClipboard value={blockDetails.data.id} />
                            </span>
                          </div>

                          <div className={styles.dataContainer}>
                            <label>{t('Height')}</label>
                            <span>
                              <CopyToClipboard value={blockDetails.data.height} />
                            </span>
                          </div>

                          <div className={styles.dataContainer}>
                            <label>{t('Version')}</label>
                            <span>{blockDetails.data.version}</span>
                          </div>

                          <div className={styles.dataContainer}>
                            <label>{t('Confirmations')}</label>
                            <span>{blockDetails.data.confirmations}</span>
                          </div>

                          <div className={styles.dataContainer}>
                            <label>{t('Reward')}</label>
                            <span>
                              <LiskAmount val={blockDetails.data.reward} token={tokenMap.LSK.key} />
                            </span>
                          </div>
                        </Box.Row>

                        <Box.Row>
                          <div className={styles.dataContainer}>
                            <label>{t('Total fee')}</label>
                            <span>
                              <LiskAmount
                                val={blockDetails.data.totalFee}
                                token={tokenMap.LSK.key}
                              />
                            </span>
                          </div>

                          <div className={styles.dataContainer}>
                            <label>{t('Total forged')}</label>
                            <span>
                              <LiskAmount
                                val={blockDetails.data.totalForged}
                                token={tokenMap.LSK.key}
                              />
                            </span>
                          </div>

                          <div className={styles.dataContainer}>
                            <label>{t('Total amount')}</label>
                            <span>
                              <LiskAmount
                                val={blockDetails.data.totalAmount}
                                token={tokenMap.LSK.key}
                              />
                            </span>
                          </div>

                          <div className={styles.dataContainer}>
                            <label>{t('Date')}</label>
                            <span>
                              <DateTimeFromTimestamp time={blockDetails.data.timestamp * 1000} token="BTC" />
                            </span>
                          </div>

                          <div className={styles.dataContainer}>
                            <label>{t('Generated by')}</label>
                            <span>
                              <Link to={`${routes.accounts.path}/${blockDetails.data.generatorAddress}`}>
                                {blockDetails.data.generatorUsername}
                              </Link>
                            </span>
                          </div>
                        </Box.Row>
                      </div>
                    )
                  }
              </React.Fragment>
            )
        }
      </Box>

      <TransactionsTable
        columns={columns}
        title={t('Transactions')}
        transactions={blockTransactions}
        emptyStateMessage={t('There are no transactions for this block.')}
      />
    </PageLayout>
  );
};

export default BlockDetails;
