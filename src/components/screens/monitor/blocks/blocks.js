import PropTypes from 'prop-types';
import React from 'react';
import { Link } from 'react-router-dom';
import grid from 'flexboxgrid/dist/flexboxgrid.css';
import { DateTimeFromTimestamp } from '../../../toolbox/timestamp';
import BlockFilterDropdown from './blockFilterDropdown';
import Box from '../../../toolbox/box';
import BoxHeader from '../../../toolbox/box/header';
import BoxContent from '../../../toolbox/box/content';
import FilterBar from '../../../shared/filterBar';
import LiskAmount from '../../../shared/liskAmount';
import LoadLatestButton from '../../../shared/loadLatestButton';
import MonitorHeader from '../header';
import Table from '../../../toolbox/list';
import routes from '../../../../constants/routes';
import styles from './blocks.css';
import withFilters from '../../../../utils/withFilters';
import BlocksOverview from './blocksOverview';

const BlockRow = React.memo(({ data, className }) => (
  <Link
    key={data.id}
    className={`${grid.row} ${className}`}
    to={`${routes.blocks.path}/${data.id}`}
  >
    <span className={grid['col-md-1']}>
      {data.height}
    </span>
    <span className={grid['col-md-2']}>
      <DateTimeFromTimestamp time={data.timestamp * 1000} token="BTC" />
    </span>
    <span className={grid['col-md-3']}>
      {data.numberOfTransactions}
    </span>
    <span className={grid['col-md-2']}>
      {data.totalAmount}
    </span>
    <span className={grid['col-md-2']}>
      {data.generatorUsername}
    </span>
    <span className={grid['col-md-2']}>
      <LiskAmount val={data.totalForged} token="LSK" />
    </span>
  </Link>
));

const header = changeSort => ([
  {
    title: 'Height',
    classList: `${grid['col-md-1']}`,
    sort: () => changeSort('height'),
  },
  {
    title: 'Date',
    classList: `${grid['col-md-2']}`,
  },
  {
    title: 'Transactions',
    classList: `${grid['col-md-3']}`,
  },
  {
    title: 'Generated by',
    classList: `${grid['col-md-2']}`,
  },
  {
    title: 'Amount',
    classList: `${grid['col-md-2']}`,
  },
  {
    title: 'Forged',
    classList: `${grid['col-md-2']}`,
  },
]);

const Blocks = ({
  t,
  blocks,
  filters,
  applyFilters,
  clearFilter,
  clearAllFilters,
  sort,
  changeSort,
}) => {
  const formatters = {
    height: value => `${t('Height')}: ${value}`,
    address: value => `${t('Generated by')}: ${value}`,
  };

  const handleLoadMore = () => {
    blocks.loadData(Object.keys(filters).reduce((acc, key) => ({
      ...acc,
      ...(filters[key] && { [key]: filters[key] }),
    }), {
      offset: blocks.data.length,
      sort,
    }));
  };

  const loadLastBlocks = () => applyFilters(filters);

  return (
    <div>
      <MonitorHeader />
      <BlocksOverview t={t} />
      <Box isLoading={blocks.isLoading} width="full" main>
        <BoxHeader>
          <h2 className="blocks-header-title">{t('All blocks')}</h2>
          <BlockFilterDropdown filters={filters} applyFilters={applyFilters} />
        </BoxHeader>
        <LoadLatestButton
          event="update.block"
          onClick={loadLastBlocks}
        >
          {t('New blocks')}
        </LoadLatestButton>
        <FilterBar {...{
          clearFilter, clearAllFilters, filters, formatters, t,
        }}
        />
        <BoxContent className={styles.content}>
          <Table
            data={blocks.data}
            isLoading={blocks.isLoading}
            row={BlockRow}
            loadData={handleLoadMore}
            header={header(changeSort)}
            currentSort={sort}
          />
        </BoxContent>
      </Box>
    </div>
  );
};

Blocks.propTypes = {
  t: PropTypes.func.isRequired,
  blocks: PropTypes.shape({
    data: PropTypes.array.isRequired,
    isLoading: PropTypes.bool.isRequired,
  }).isRequired,
};

const defaultFilters = {
  dateFrom: '',
  dateTo: '',
  height: '',
  address: '',
};
const defaultSort = 'height:desc';

export default withFilters('blocks', defaultFilters, defaultSort)(Blocks);
